(()=>{"use strict";class e{constructor(e,t,n){this.indexCount=e.accessors[t.indices].count;const r=e.bufferViews[e.accessors[t.indices].bufferView];function i(t,r){const i=e.bufferViews[e.accessors[t].bufferView];return new Float32Array(n,i.byteOffset+(e.accessors[t].byteOffset||0),e.accessors[t].count*r)}this.indices=new Uint16Array(n,r.byteOffset,r.byteLength/Uint16Array.BYTES_PER_ELEMENT),this.positions=i(t.attributes.POSITION,3),this.normals=i(t.attributes.NORMAL,3),void 0!==t.attributes.TEXCOORD_0&&(this.uvs=i(t.attributes.TEXCOORD_0,2)),this.material=t.material}}var t=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function o(e){try{c(r.next(e))}catch(e){s(e)}}function a(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}c((r=r.apply(e,t||[])).next())}))};class n{constructor(e,t,n){this.scenes=e.scenes,this.scene=e.scene,this.nodes=e.nodes,this.cameras=e.cameras,this.meshes=t,this.materials=e.materials,this.images=n}}var r=1e-6,i="undefined"!=typeof Float32Array?Float32Array:Array;function s(){var e=new i(16);return i!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function o(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],a=t[4],c=t[5],u=t[6],l=t[7],h=t[8],d=t[9],f=t[10],m=t[11],p=t[12],v=t[13],g=t[14],b=t[15],x=n[0],y=n[1],w=n[2],P=n[3];return e[0]=x*r+y*a+w*h+P*p,e[1]=x*i+y*c+w*d+P*v,e[2]=x*s+y*u+w*f+P*g,e[3]=x*o+y*l+w*m+P*b,x=n[4],y=n[5],w=n[6],P=n[7],e[4]=x*r+y*a+w*h+P*p,e[5]=x*i+y*c+w*d+P*v,e[6]=x*s+y*u+w*f+P*g,e[7]=x*o+y*l+w*m+P*b,x=n[8],y=n[9],w=n[10],P=n[11],e[8]=x*r+y*a+w*h+P*p,e[9]=x*i+y*c+w*d+P*v,e[10]=x*s+y*u+w*f+P*g,e[11]=x*o+y*l+w*m+P*b,x=n[12],y=n[13],w=n[14],P=n[15],e[12]=x*r+y*a+w*h+P*p,e[13]=x*i+y*c+w*d+P*v,e[14]=x*s+y*u+w*f+P*g,e[15]=x*o+y*l+w*m+P*b,e}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)});var a=o;function c(e=!0){return`\n\n  [[block]] struct Camera\n  {\n      projView: mat4x4<f32>;\n  };\n  [[group(0), binding(0)]] var<uniform> camera: Camera;\n\n  [[block]] struct Mat4\n  {\n      model: mat4x4<f32>;\n      modelInvTr: mat4x4<f32>;\n  };\n  [[group(1), binding(0)]] var<uniform> mat4: Mat4;\n\n  struct VertOut\n  {\n      [[builtin(position)]] Position: vec4<f32>;\n      [[location(0)]] normal: vec3<f32>;\n      [[location(1)]] worldPos: vec3<f32>;\n      ${e?"[[location(2)]] uv: vec2<f32>;":""}\n  };\n\n  [[stage(vertex)]]\n  fn main([[location(0)]] pos: vec3<f32>,\n          [[location(1)]] normal: vec3<f32>,\n          ${e?"[[location(2)]] uv: vec2<f32>":""}) -> VertOut\n  {\n      var v: VertOut;\n      v.Position = camera.projView * mat4.model * vec4<f32>(pos, 1.0);\n      v.normal = normalize((mat4.modelInvTr * vec4<f32>(normal, 0.0)).xyz);\n      v.worldPos = (mat4.model * vec4<f32>(pos, 1.0)).xyz;\n      ${e?"v.uv = uv;":""}\n      return v;\n  }\n  `}function u(e,t=1){const n=void 0!==e?e:t;return Number.isInteger(n)?`${n}.0`:n}function l(e,t){const{baseColorTexture:n,metallicRoughnessTexture:r,metallicFactor:i,roughnessFactor:s}=e.pbrMetallicRoughness;let{baseColorFactor:o}=e.pbrMetallicRoughness;return o=o||[1,1,1,1],`\n\n  [[block]] struct Camera\n  {\n      eye: vec3<f32>;\n  };\n  [[group(0), binding(1)]] var<uniform> camera: Camera;\n\n  ${n?"\n  [[group(1), binding(1)]] var texSampler: sampler;\n  [[group(1), binding(2)]] var tex: texture_2d<f32>;\n  /* wgsl */ ":""}\n  ${r?"\n  [[group(1), binding(3)]] var metalRoughSampler: sampler;\n  [[group(1), binding(4)]] var metalRoughTex: texture_2d<f32>;\n  /* wgsl */ ":""}\n\n  let pi: f32 = 3.141592653589793;\n\n  fn phong(color: vec3<f32>,\n           l: vec3<f32>,\n           v: vec3<f32>,\n           n: vec3<f32>) -> vec3<f32>\n  {\n      let specExp = 64.0;\n      let intensity = 0.5;\n      let ambient = 0.5;\n\n      let diffuse = max(dot(n, l), 0.0);\n      let specular = pow(max(dot(n, normalize(l + v)), 0.0), specExp);\n\n      return color * ((diffuse + specular) * intensity + ambient);\n  }\n\n  fn brdf(color: vec3<f32>,\n          metallic: f32,\n          roughness: f32,\n          l: vec3<f32>,\n          v: vec3<f32>,\n          n: vec3<f32>) -> vec3<f32>\n  {\n      let h = normalize(l + v);\n      let ndotl = clamp(dot(n, l), 0.0, 1.0);\n      let ndotv = abs(dot(n, v));\n      let ndoth = clamp(dot(n, h), 0.0, 1.0);\n      let vdoth = clamp(dot(v, h), 0.0, 1.0);\n\n      let f0 = vec3<f32>(0.04);\n      let diffuseColor = color * (1.0 - f0) * (1.0 - metallic);\n      let specularColor = mix(f0, color, metallic);\n\n      let reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\n      let reflectance0 = specularColor;\n      let reflectance9 = vec3<f32>(clamp(reflectance * 25.0, 0.0, 1.0));\n      let f = reflectance0 + (reflectance9 - reflectance0) * pow(1.0 - vdoth, 5.0);\n\n      let r2 = roughness * roughness;\n      let r4 = r2 * r2;\n      let attenuationL = 2.0 * ndotl / (ndotl + sqrt(r4 + (1.0 - r4) * ndotl * ndotl));\n      let attenuationV = 2.0 * ndotv / (ndotv + sqrt(r4 + (1.0 - r4) * ndotv * ndotv));\n      let g = attenuationL * attenuationV;\n\n      let temp = ndoth * ndoth * (r2 - 1.0) + 1.0;\n      let d = r2 / (pi * temp * temp);\n\n      let diffuse = (1.0 - f) / pi * diffuseColor;\n      let specular = max(f * g * d / (4.0 * ndotl * ndotv), vec3<f32>(0.0));\n      let intensity = 2.5;\n      let ambient = 0.4;\n      return ndotl * (diffuse + specular) * intensity + color * ambient;\n  }\n\n  [[stage(fragment)]]\n  fn main([[location(0)]] normal: vec3<f32>,\n          [[location(1)]] worldPos: vec3<f32>,\n          ${t?"[[location(2)]] uv: vec2<f32>":""}) -> [[location(0)]] vec4<f32>\n  {\n      let lightPos = vec3<f32>(2.0, 4.0, 3.0);\n\n      var color = vec4<f32>(${u(o[0])},\n                            ${u(o[1])},\n                            ${u(o[2])},\n                            ${u(o[3])});\n      ${n?"color = color * textureSample(tex, texSampler, uv);":""}\n\n      var metallic: f32 = ${u(i)};\n      var roughness: f32 = ${u(s)};\n      ${r?"\n      let metalRough = textureSample(metalRoughTex, metalRoughSampler, uv);\n      metallic = metallic * metalRough.b;\n      roughness = roughness * metalRough.g;\n      /* wgsl */ ":""}\n\n      // return vec4<f32>(phong(color.rgb,\n      //                        normalize(lightPos - worldPos),\n      //                        normalize(camera.eye - worldPos),\n      //                        normalize(normal)),\n      //                  color.a);\n      return vec4<f32>(brdf(color.rgb,\n                            metallic,\n                            roughness,\n                            normalize(lightPos - worldPos),\n                            normalize(camera.eye - worldPos),\n                            normalize(normal)),\n                       color.a);\n  }\n  `}class h{constructor(e,t,n,r){this.meshes={},this.textures={};const a=n.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{}}]}),u=n.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),h=n.createBuffer({size:12,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});this.camera={projViewBuffer:u,eyeBuffer:h,bindGroup:n.createBindGroup({layout:a,entries:[{binding:0,resource:{buffer:u}},{binding:1,resource:{buffer:h}}]})},this.pipelines=e.materials.map((t=>{const{baseColorTexture:i,metallicRoughnessTexture:s}=t.pbrMetallicRoughness;return[i,s].forEach((t=>{t&&!this.textures[t.index]&&(this.textures[t.index]=n.createTexture({size:[e.images[t.index].width,e.images[t.index].height,1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT}),n.queue.copyExternalImageToTexture({source:e.images[t.index]},{texture:this.textures[t.index]},[e.images[t.index].width,e.images[t.index].height]))})),function(e,t,n,r){const{baseColorTexture:i,metallicRoughnessTexture:s}=n.pbrMetallicRoughness,o=void 0!==i;function a(e,t){return{attributes:[{shaderLocation:e,offset:0,format:`float32x${t}`}],arrayStride:4*t}}const u=[a(0,3),a(1,3)];o&&u.push(a(2,2));const h=[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{}}];return i&&(h.push({binding:1,visibility:GPUShaderStage.FRAGMENT,sampler:{}}),h.push({binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{}})),s&&(h.push({binding:3,visibility:GPUShaderStage.FRAGMENT,sampler:{}}),h.push({binding:4,visibility:GPUShaderStage.FRAGMENT,texture:{}})),e.createRenderPipeline({layout:e.createPipelineLayout({bindGroupLayouts:[r,e.createBindGroupLayout({entries:h})]}),vertex:{module:e.createShaderModule({code:c(o)}),entryPoint:"main",buffers:u},fragment:{module:e.createShaderModule({code:l(n,o)}),entryPoint:"main",targets:[{format:t}]},primitive:{topology:"triangle-list",cullMode:"back"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"}})}(n,r,t,a)}));const d=(e,t)=>{const r=n.createBuffer({size:e.byteLength+3&-4,usage:t,mappedAtCreation:!0});return(e instanceof Uint16Array?new Uint16Array(r.getMappedRange()):new Float32Array(r.getMappedRange())).set(e),r.unmap(),r},f=(t,r=s())=>{var a;const c=(u=r,(l=new i(16))[0]=u[0],l[1]=u[1],l[2]=u[2],l[3]=u[3],l[4]=u[4],l[5]=u[5],l[6]=u[6],l[7]=u[7],l[8]=u[8],l[9]=u[9],l[10]=u[10],l[11]=u[11],l[12]=u[12],l[13]=u[13],l[14]=u[14],l[15]=u[15],l);var u,l;if(t.matrix)o(c,c,t.matrix);else{if(t.translation&&function(e,t,n){var r,i,s,o,a,c,u,l,h,d,f,m,p=n[0],v=n[1],g=n[2];t===e?(e[12]=t[0]*p+t[4]*v+t[8]*g+t[12],e[13]=t[1]*p+t[5]*v+t[9]*g+t[13],e[14]=t[2]*p+t[6]*v+t[10]*g+t[14],e[15]=t[3]*p+t[7]*v+t[11]*g+t[15]):(r=t[0],i=t[1],s=t[2],o=t[3],a=t[4],c=t[5],u=t[6],l=t[7],h=t[8],d=t[9],f=t[10],m=t[11],e[0]=r,e[1]=i,e[2]=s,e[3]=o,e[4]=a,e[5]=c,e[6]=u,e[7]=l,e[8]=h,e[9]=d,e[10]=f,e[11]=m,e[12]=r*p+a*v+h*g+t[12],e[13]=i*p+c*v+d*g+t[13],e[14]=s*p+u*v+f*g+t[14],e[15]=o*p+l*v+m*g+t[15])}(c,c,t.translation),t.rotation){const e=s();!function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=n+n,a=r+r,c=i+i,u=n*o,l=r*o,h=r*a,d=i*o,f=i*a,m=i*c,p=s*o,v=s*a,g=s*c;e[0]=1-h-m,e[1]=l+g,e[2]=d-v,e[3]=0,e[4]=l-g,e[5]=1-u-m,e[6]=f+p,e[7]=0,e[8]=d+v,e[9]=f-p,e[10]=1-u-h,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1}(e,t.rotation),o(c,c,e)}t.scale&&function(e,t,n){var r=n[0],i=n[1],s=n[2];e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*i,e[5]=t[5]*i,e[6]=t[6]*i,e[7]=t[7]*i,e[8]=t[8]*s,e[9]=t[9]*s,e[10]=t[10]*s,e[11]=t[11]*s,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]}(c,c,t.scale)}if(void 0!==t.mesh){const r=s();!function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=t[4],a=t[5],c=t[6],u=t[7],l=t[8],h=t[9],d=t[10],f=t[11],m=t[12],p=t[13],v=t[14],g=t[15],b=n*a-r*o,x=n*c-i*o,y=n*u-s*o,w=r*c-i*a,P=r*u-s*a,M=i*u-s*c,T=l*p-h*m,E=l*v-d*m,R=l*g-f*m,U=h*v-d*p,G=h*g-f*p,B=d*g-f*v,S=b*B-x*G+y*U+w*R-P*E+M*T;S&&(S=1/S,e[0]=(a*B-c*G+u*U)*S,e[1]=(i*G-r*B-s*U)*S,e[2]=(p*M-v*P+g*w)*S,e[3]=(d*P-h*M-f*w)*S,e[4]=(c*R-o*B-u*E)*S,e[5]=(n*B-i*R+s*E)*S,e[6]=(v*y-m*M-g*x)*S,e[7]=(l*M-d*y+f*x)*S,e[8]=(o*G-a*R+u*T)*S,e[9]=(r*R-n*G-s*T)*S,e[10]=(m*P-p*y+g*b)*S,e[11]=(h*y-l*P-f*b)*S,e[12]=(a*E-o*U-c*T)*S,e[13]=(n*U-r*E+i*T)*S,e[14]=(p*x-m*w-v*b)*S,e[15]=(l*w-h*x+d*b)*S)}(r,c),function(e,t){if(e===t){var n=t[1],r=t[2],i=t[3],s=t[6],o=t[7],a=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=n,e[6]=t[9],e[7]=t[13],e[8]=r,e[9]=s,e[11]=t[14],e[12]=i,e[13]=o,e[14]=a}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15]}(r,r);const i=d(function(e,t){const n=new Float32Array(e.length+t.length);return n.set(e),n.set(t,e.length),n}(c,r),GPUBufferUsage.UNIFORM);this.meshes[t.mesh]?this.meshes[t.mesh].matrixBuffers.push(i):this.meshes[t.mesh]={matrixBuffers:[i],primitives:e.meshes[t.mesh].map((t=>{const{baseColorTexture:r,metallicRoughnessTexture:s}=e.materials[t.material].pbrMetallicRoughness,o=[{binding:0,resource:{buffer:i}}];r&&(o.push({binding:1,resource:n.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"linear"})}),o.push({binding:2,resource:this.textures[r.index].createView()})),s&&(o.push({binding:3,resource:n.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"linear"})}),o.push({binding:4,resource:this.textures[s.index].createView()}));const a=t.material;return{indexCount:t.indexCount,positions:d(t.positions,GPUBufferUsage.VERTEX),normals:d(t.normals,GPUBufferUsage.VERTEX),indices:d(t.indices,GPUBufferUsage.INDEX),uvs:t.uvs?d(t.uvs,GPUBufferUsage.VERTEX):null,pipeline:a,uniformBindGroup:n.createBindGroup({layout:this.pipelines[a].getBindGroupLayout(1),entries:o})}}))}}null===(a=t.children)||void 0===a||a.forEach((t=>f(e.nodes[t],c)))};e.scenes[t].nodes.forEach((t=>{f(e.nodes[t])}))}destroy(){Object.entries(this.meshes).forEach((([,e])=>{e.matrixBuffers.forEach((e=>{e.destroy()})),e.primitives.forEach((e=>{var t;e.indices.destroy(),e.positions.destroy(),e.normals.destroy(),null===(t=e.uvs)||void 0===t||t.destroy()}))})),Object.entries(this.textures).forEach((([,e])=>e.destroy()))}}function d(){var e=new i(3);return i!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function f(e,t,n){var r=new i(3);return r[0]=e,r[1]=t,r[2]=n,r}d();const m=d(),p=f(0,1,0);function v(e,t,n){return Math.min(Math.max(e,t),n)}class g{constructor(e){this.radius=3,this.theta=0,this.phi=0,this.proj=s(),this.view=s(),this.eye=f(0,0,3),this.projView=s(),this.canvas=e;const t=e.clientWidth/e.clientHeight;(function(e,t,n,r,i){var s,o=1/Math.tan(t/2);e[0]=o/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=o,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=i&&i!==1/0?(s=1/(r-i),e[10]=(i+r)*s,e[14]=2*i*r*s):(e[10]=-1,e[14]=-2*r)})(this.proj,Math.PI/3,t,.01,1/0),this.update(),window.addEventListener("resize",(()=>{this.proj[0]=1/(Math.tan(Math.PI/6)*(e.clientWidth/e.clientHeight)),a(this.projView,this.proj,this.view)}));let n=!1;this.canvas.onmousedown=()=>{n=!0},this.canvas.onmouseup=()=>{n=!1},this.canvas.onmousemove=e=>{n&&(this.theta-=e.movementX/window.innerWidth*Math.PI*2,this.phi=v(this.phi-e.movementY/window.innerHeight*Math.PI,-Math.PI/2+.1,Math.PI/2-.1),this.update())},this.canvas.onwheel=e=>{this.radius=v(this.radius+.002*e.deltaY,.1,1/0),this.update()}}update(){var e,t,n,i,s,o;this.eye=f(0,0,this.radius),e=this.eye,t=this.eye,n=m,i=this.phi,o=[],(s=[])[0]=t[0]-n[0],s[1]=t[1]-n[1],s[2]=t[2]-n[2],o[0]=s[0],o[1]=s[1]*Math.cos(i)-s[2]*Math.sin(i),o[2]=s[1]*Math.sin(i)+s[2]*Math.cos(i),e[0]=o[0]+n[0],e[1]=o[1]+n[1],e[2]=o[2]+n[2],function(e,t,n,r){var i=[],s=[];i[0]=t[0]-n[0],i[1]=t[1]-n[1],i[2]=t[2]-n[2],s[0]=i[2]*Math.sin(r)+i[0]*Math.cos(r),s[1]=i[1],s[2]=i[2]*Math.cos(r)-i[0]*Math.sin(r),e[0]=s[0]+n[0],e[1]=s[1]+n[1],e[2]=s[2]+n[2]}(this.eye,this.eye,m,this.theta),function(e,t,n,i){var s,o,a,c,u,l,h,d,f,m,p=t[0],v=t[1],g=t[2],b=i[0],x=i[1],y=i[2],w=n[0],P=n[1],M=n[2];Math.abs(p-w)<r&&Math.abs(v-P)<r&&Math.abs(g-M)<r?function(e){e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1}(e):(h=p-w,d=v-P,f=g-M,s=x*(f*=m=1/Math.hypot(h,d,f))-y*(d*=m),o=y*(h*=m)-b*f,a=b*d-x*h,(m=Math.hypot(s,o,a))?(s*=m=1/m,o*=m,a*=m):(s=0,o=0,a=0),c=d*a-f*o,u=f*s-h*a,l=h*o-d*s,(m=Math.hypot(c,u,l))?(c*=m=1/m,u*=m,l*=m):(c=0,u=0,l=0),e[0]=s,e[1]=c,e[2]=h,e[3]=0,e[4]=o,e[5]=u,e[6]=d,e[7]=0,e[8]=a,e[9]=l,e[10]=f,e[11]=0,e[12]=-(s*p+o*v+a*g),e[13]=-(c*p+u*v+l*g),e[14]=-(h*p+d*v+f*g),e[15]=1)}(this.view,this.eye,m,p),a(this.projView,this.proj,this.view)}reset(){this.radius=3,this.theta=0,this.phi=0,this.update()}}var b=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function o(e){try{c(r.next(e))}catch(e){s(e)}}function a(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}c((r=r.apply(e,t||[])).next())}))};class x{constructor(e,t,n,r){this.canvas=e,this.device=t,this.context=n,this.contextFormat=r;let i=t.createTexture({size:[e.clientWidth*devicePixelRatio,e.clientHeight*devicePixelRatio],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT});this.renderPassDesc={colorAttachments:[],depthStencilAttachment:{view:i.createView(),depthLoadValue:1,depthStoreOp:"store",stencilLoadValue:0,stencilStoreOp:"store"}},window.addEventListener("resize",(()=>{const s=[e.clientWidth*devicePixelRatio,e.clientHeight*devicePixelRatio];n.configure({device:t,format:r,size:s}),i.destroy(),i=t.createTexture({size:s,format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT}),this.renderPassDesc.depthStencilAttachment.view=i.createView()})),this.camera=new g(e)}render(){const e=()=>{const t=this.device.createCommandEncoder();this.renderPassDesc.colorAttachments=[{view:this.context.getCurrentTexture().createView(),loadValue:{r:.3,g:.5,b:.7,a:1},storeOp:"store"}];const n=t.beginRenderPass(this.renderPassDesc),r=this.camera.projView;this.device.queue.writeBuffer(this.resource.camera.projViewBuffer,0,r.buffer,r.byteOffset,r.byteLength);const i=this.camera.eye;this.device.queue.writeBuffer(this.resource.camera.eyeBuffer,0,i.buffer,i.byteOffset,i.byteLength),n.setBindGroup(0,this.resource.camera.bindGroup),Object.entries(this.resource.meshes).forEach((([,e])=>{for(let t=0;t<e.matrixBuffers.length;t+=1)e.primitives.forEach((e=>{n.setPipeline(this.resource.pipelines[e.pipeline]),n.setVertexBuffer(0,e.positions),n.setVertexBuffer(1,e.normals),e.uvs&&n.setVertexBuffer(2,e.uvs),n.setIndexBuffer(e.indices,"uint16"),n.setBindGroup(1,e.uniformBindGroup),n.drawIndexed(e.indexCount)}))})),n.endPass(),this.device.queue.submit([t.finish()]),requestAnimationFrame(e)};requestAnimationFrame(e)}load(r){var i;return b(this,void 0,void 0,(function*(){this.gltf=yield function(r){return t(this,void 0,void 0,(function*(){const i=r.substring(0,r.lastIndexOf("/")),s=yield function(e){return new Promise((t=>{const n=new XMLHttpRequest;n.overrideMimeType("application/json"),n.open("GET",e),n.onreadystatechange=()=>{4===n.readyState&&200===n.status&&t(JSON.parse(n.responseText))},n.send(null)}))}(r);let o;const a=Promise.all(s.buffers.map((e=>function(e){return new Promise((t=>{const n=new XMLHttpRequest;n.responseType="arraybuffer",n.open("GET",e),n.onreadystatechange=()=>{4===n.readyState&&200===n.status&&t(n.response)},n.send(null)}))}(`${i}/${e.uri}`)))).then((t=>{o=function(t,n){return t.meshes.map((r=>r.primitives.map((r=>new e(t,r,n)))))}(s,t[0])})),c=[];let u=Promise.resolve();return s.images&&(u=Promise.all(s.images.map(((e,n)=>function(e){return t(this,void 0,void 0,(function*(){const t=new Image;return t.crossOrigin="Anonymous",t.src=e,yield t.decode(),createImageBitmap(t)}))}(`${i}/${e.uri}`).then((e=>{c[n]=e})))))),Promise.all([a,u]).then((()=>new n(s,o,c)))}))}(r),null===(i=this.resource)||void 0===i||i.destroy(),this.resource=new h(this.gltf,this.gltf.scene,this.device,this.contextFormat),this.camera.reset(),this.render()}))}}const y=document.getElementById("webgpu-canvas"),w=document.getElementById("model-select");let P;w.onchange=()=>P.load(w.value),fetch("https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/model-index.json").then((e=>e.json())).then((e=>{e.forEach((e=>{return t=void 0,n=void 0,i=function*(){const t=document.createElement("option");t.innerHTML=e.name,t.value=`https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/${e.name}/glTF/${e.name}.gltf`,w.add(t),"DamagedHelmet"===e.name&&(w.value=t.value,P=yield function(e){return b(this,void 0,void 0,(function*(){const t=navigator.gpu;if(!t)throw new Error("WebGPU is not supported on this browser.");const n=yield t.requestAdapter(),r=yield n.requestDevice(),i=e.getContext("webgpu"),s=i.getPreferredFormat(n);return i.configure({device:r,format:s,size:[e.clientWidth*devicePixelRatio,e.clientHeight*devicePixelRatio]}),new x(e,r,i,s)}))}(y),P.load(w.value))},new((r=void 0)||(r=Promise))((function(e,s){function o(e){try{c(i.next(e))}catch(e){s(e)}}function a(e){try{c(i.throw(e))}catch(e){s(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(o,a)}c((i=i.apply(t,n||[])).next())}));var t,n,r,i}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,