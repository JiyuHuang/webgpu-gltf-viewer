(()=>{"use strict";class e{constructor(e,t,n){this.indexCount=e.accessors[t.indices].count;const i=e.bufferViews[e.accessors[t.indices].bufferView];function r(t,i){const r=e.bufferViews[e.accessors[t].bufferView];return new Float32Array(n,r.byteOffset+(e.accessors[t].byteOffset||0),e.accessors[t].count*i)}this.indices=new Uint16Array(n,i.byteOffset,i.byteLength/Uint16Array.BYTES_PER_ELEMENT),this.positions=r(t.attributes.POSITION,3),this.normals=r(t.attributes.NORMAL,3),t.attributes.TEXCOORD_0&&(this.uvs=r(t.attributes.TEXCOORD_0,2)),this.material=t.material}}var t=function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{c(i.next(e))}catch(e){s(e)}}function a(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}c((i=i.apply(e,t||[])).next())}))};class n{constructor(e,t,n){this.scenes=e.scenes,this.scene=e.scene,this.nodes=e.nodes,this.cameras=e.cameras,this.meshes=t,this.materials=e.materials,this.images=n}}var i=1e-6,r="undefined"!=typeof Float32Array?Float32Array:Array;function s(){var e=new r(16);return r!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function o(e,t,n){var i=t[0],r=t[1],s=t[2],o=t[3],a=t[4],c=t[5],u=t[6],h=t[7],l=t[8],d=t[9],m=t[10],f=t[11],p=t[12],v=t[13],g=t[14],x=t[15],w=n[0],y=n[1],b=n[2],P=n[3];return e[0]=w*i+y*a+b*l+P*p,e[1]=w*r+y*c+b*d+P*v,e[2]=w*s+y*u+b*m+P*g,e[3]=w*o+y*h+b*f+P*x,w=n[4],y=n[5],b=n[6],P=n[7],e[4]=w*i+y*a+b*l+P*p,e[5]=w*r+y*c+b*d+P*v,e[6]=w*s+y*u+b*m+P*g,e[7]=w*o+y*h+b*f+P*x,w=n[8],y=n[9],b=n[10],P=n[11],e[8]=w*i+y*a+b*l+P*p,e[9]=w*r+y*c+b*d+P*v,e[10]=w*s+y*u+b*m+P*g,e[11]=w*o+y*h+b*f+P*x,w=n[12],y=n[13],b=n[14],P=n[15],e[12]=w*i+y*a+b*l+P*p,e[13]=w*r+y*c+b*d+P*v,e[14]=w*s+y*u+b*m+P*g,e[15]=w*o+y*h+b*f+P*x,e}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)});var a=o;function c(e=!0){return`\n\n  [[block]] struct Mat4\n  {\n      model: mat4x4<f32>;\n      modelInvTr: mat4x4<f32>;\n      projView: mat4x4<f32>;\n  };\n  [[group(0), binding(0)]] var<uniform> mat4: Mat4;\n\n  struct VertOut\n  {\n      [[builtin(position)]] Position: vec4<f32>;\n      [[location(0)]] normal: vec3<f32>;\n      [[location(1)]] worldPos: vec3<f32>;\n      ${e?"[[location(2)]] uv: vec2<f32>;":""}\n  };\n\n  [[stage(vertex)]]\n  fn main([[location(0)]] pos: vec3<f32>,\n          [[location(1)]] normal: vec3<f32>,\n          ${e?"[[location(2)]] uv: vec2<f32>":""}) -> VertOut\n  {\n      var v: VertOut;\n      v.Position = mat4.projView * mat4.model * vec4<f32>(pos, 1.0);\n      v.normal = normalize((mat4.modelInvTr * vec4<f32>(normal, 0.0)).xyz);\n      v.worldPos = (mat4.model * vec4<f32>(pos, 1.0)).xyz;\n      ${e?"v.uv = uv;":""}\n      return v;\n  }\n  `}function u(e,t=[1,1,1,1]){const n=t.map((e=>Number.isInteger(e)?`${e}.0`:e));return`\n\n  ${e?"\n  [[group(0), binding(1)]] var texSampler: sampler;\n  [[group(0), binding(2)]] var tex: texture_2d<f32>;\n  /* wgsl */ ":""}\n\n  [[stage(fragment)]]\n  fn main([[location(0)]] normal: vec3<f32>,\n          [[location(1)]] worldPos: vec3<f32>,\n          ${e?"[[location(2)]] uv: vec2<f32>":""}) -> [[location(0)]] vec4<f32>\n  {\n      var lightPos: vec3<f32> = vec3<f32>(0.0, 0.0, -3.0);\n      var color: vec4<f32> = vec4<f32>(${n[0]},\n                                       ${n[1]},\n                                       ${n[2]},\n                                       ${n[3]});\n      ${e?"color = color * textureSample(tex, texSampler, uv);":""}\n      var lambertian: f32 = dot(normal, normalize(worldPos - lightPos));\n      lambertian = clamp(lambertian * 0.67, 0.0, 1.0) + 0.33;\n      color = vec4<f32>(color.rgb * lambertian, color.a);\n      return color;\n  }\n  `}class h{constructor(e,t,n,i){this.meshes={},this.textures={},this.pipelines=e.materials.map((t=>{const{baseColorTexture:r}=t.pbrMetallicRoughness;return r&&!this.textures[r.index]&&(this.textures[r.index]=n.createTexture({size:[e.images[r.index].width,e.images[r.index].height,1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT}),n.queue.copyExternalImageToTexture({source:e.images[r.index]},{texture:this.textures[r.index]},[e.images[r.index].width,e.images[r.index].height])),function(e,t,n){const{baseColorFactor:i,baseColorTexture:r}=n.pbrMetallicRoughness,s=void 0!==r;function o(e,t){return{attributes:[{shaderLocation:e,offset:0,format:`float32x${t}`}],arrayStride:4*t}}const a=[o(0,3),o(1,3)];s&&a.push(o(2,2));const h=[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{}}];return s&&(h.push({binding:1,visibility:GPUShaderStage.FRAGMENT,sampler:{}}),h.push({binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{}})),e.createRenderPipeline({layout:e.createPipelineLayout({bindGroupLayouts:[e.createBindGroupLayout({entries:h})]}),vertex:{module:e.createShaderModule({code:c(s)}),entryPoint:"main",buffers:a},fragment:{module:e.createShaderModule({code:u(s,i)}),entryPoint:"main",targets:[{format:t}]},primitive:{topology:"triangle-list",cullMode:"back"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"}})}(n,i,t)}));const a=(e,t=!1)=>{const i=n.createBuffer({size:e.byteLength+3&-4,usage:t?GPUBufferUsage.INDEX:GPUBufferUsage.VERTEX,mappedAtCreation:!0});return(e instanceof Uint16Array?new Uint16Array(i.getMappedRange()):new Float32Array(i.getMappedRange())).set(e),i.unmap(),i},h=(t,i=s())=>{var c;const u=(l=i,(d=new r(16))[0]=l[0],d[1]=l[1],d[2]=l[2],d[3]=l[3],d[4]=l[4],d[5]=l[5],d[6]=l[6],d[7]=l[7],d[8]=l[8],d[9]=l[9],d[10]=l[10],d[11]=l[11],d[12]=l[12],d[13]=l[13],d[14]=l[14],d[15]=l[15],d);var l,d;if(t.matrix?o(u,u,t.matrix):(t.translation&&o(u,u,t.translation),t.rotation&&o(u,u,t.rotation),t.scale&&o(u,u,t.scale)),void 0!==t.mesh){const i=s();if(function(e,t){var n=t[0],i=t[1],r=t[2],s=t[3],o=t[4],a=t[5],c=t[6],u=t[7],h=t[8],l=t[9],d=t[10],m=t[11],f=t[12],p=t[13],v=t[14],g=t[15],x=n*a-i*o,w=n*c-r*o,y=n*u-s*o,b=i*c-r*a,P=i*u-s*a,M=r*u-s*c,T=h*p-l*f,E=h*v-d*f,R=h*g-m*f,A=l*v-d*p,U=l*g-m*p,G=d*g-m*v,I=x*G-w*U+y*A+b*R-P*E+M*T;I&&(I=1/I,e[0]=(a*G-c*U+u*A)*I,e[1]=(r*U-i*G-s*A)*I,e[2]=(p*M-v*P+g*b)*I,e[3]=(d*P-l*M-m*b)*I,e[4]=(c*R-o*G-u*E)*I,e[5]=(n*G-r*R+s*E)*I,e[6]=(v*y-f*M-g*w)*I,e[7]=(h*M-d*y+m*w)*I,e[8]=(o*U-a*R+u*T)*I,e[9]=(i*R-n*U-s*T)*I,e[10]=(f*P-p*y+g*x)*I,e[11]=(l*y-h*P-m*x)*I,e[12]=(a*E-o*A-c*T)*I,e[13]=(n*A-i*E+r*T)*I,e[14]=(p*w-f*b-v*x)*I,e[15]=(h*b-l*w+d*x)*I)}(i,u),function(e,t){if(e===t){var n=t[1],i=t[2],r=t[3],s=t[6],o=t[7],a=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=n,e[6]=t[9],e[7]=t[13],e[8]=i,e[9]=s,e[11]=t[14],e[12]=r,e[13]=o,e[14]=a}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15]}(i,i),this.meshes[t.mesh])this.meshes[t.mesh].matrices.push(u),this.meshes[t.mesh].modelInvTrs.push(i);else{const r=n.createBuffer({size:192,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});this.meshes[t.mesh]={matrices:[u],modelInvTrs:[i],matrixBuffer:r,primitives:e.meshes[t.mesh].map((t=>{const{baseColorTexture:i}=e.materials[t.material].pbrMetallicRoughness,s=[{binding:0,resource:{buffer:r}}];i&&(s.push({binding:1,resource:n.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"linear"})}),s.push({binding:2,resource:this.textures[i.index].createView()}));const o=t.material;return{indexCount:t.indexCount,positions:a(t.positions),normals:a(t.normals),indices:a(t.indices,!0),uvs:t.uvs?a(t.uvs):null,pipeline:o,uniformBindGroup:n.createBindGroup({layout:this.pipelines[o].getBindGroupLayout(0),entries:s})}}))}}}null===(c=t.children)||void 0===c||c.forEach((t=>h(e.nodes[t],u)))};e.scenes[t].nodes.forEach((t=>{h(e.nodes[t])}))}destroy(){Object.entries(this.meshes).forEach((([,e])=>{e.matrixBuffer.destroy(),e.primitives.forEach((e=>{var t;e.indices.destroy(),e.positions.destroy(),e.normals.destroy(),null===(t=e.uvs)||void 0===t||t.destroy()}))})),Object.entries(this.textures).forEach((([,e])=>e.destroy()))}}function l(){var e=new r(3);return r!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function d(e,t,n){var i=new r(3);return i[0]=e,i[1]=t,i[2]=n,i}l();const m=l(),f=d(0,1,0);function p(e,t,n){return Math.min(Math.max(e,t),n)}class v{constructor(e){this.radius=3,this.theta=0,this.phi=0,this.proj=s(),this.view=s(),this.projView=s(),this.canvas=e;const t=e.clientWidth/e.clientHeight;(function(e,t,n,i,r){var s,o=1/Math.tan(t/2);e[0]=o/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=o,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=r&&r!==1/0?(s=1/(i-r),e[10]=(r+i)*s,e[14]=2*r*i*s):(e[10]=-1,e[14]=-2*i)})(this.proj,Math.PI/2,t,.1,1/0),this.update(),window.addEventListener("resize",(()=>{this.proj[0]=1/(Math.tan(Math.PI/4)*(e.clientWidth/e.clientHeight)),a(this.projView,this.proj,this.view)}));let n=!1;this.canvas.onmousedown=()=>{n=!0},this.canvas.onmouseup=()=>{n=!1},this.canvas.onmousemove=e=>{n&&(this.theta-=e.movementX/window.innerWidth*Math.PI*2,this.phi=p(this.phi-e.movementY/window.innerHeight*Math.PI,-Math.PI/2+.1,Math.PI/2-.1),this.update())},this.canvas.onwheel=e=>{this.radius=p(this.radius+.002*e.deltaY,.1,1/0),this.update()}}update(){const e=d(0,0,this.radius);var t,n,r,s,o,c;t=e,n=e,r=m,s=this.phi,c=[],(o=[])[0]=n[0]-r[0],o[1]=n[1]-r[1],o[2]=n[2]-r[2],c[0]=o[0],c[1]=o[1]*Math.cos(s)-o[2]*Math.sin(s),c[2]=o[1]*Math.sin(s)+o[2]*Math.cos(s),t[0]=c[0]+r[0],t[1]=c[1]+r[1],t[2]=c[2]+r[2],function(e,t,n,i){var r=[],s=[];r[0]=t[0]-n[0],r[1]=t[1]-n[1],r[2]=t[2]-n[2],s[0]=r[2]*Math.sin(i)+r[0]*Math.cos(i),s[1]=r[1],s[2]=r[2]*Math.cos(i)-r[0]*Math.sin(i),e[0]=s[0]+n[0],e[1]=s[1]+n[1],e[2]=s[2]+n[2]}(e,e,m,this.theta),function(e,t,n,r){var s,o,a,c,u,h,l,d,m,f,p=t[0],v=t[1],g=t[2],x=r[0],w=r[1],y=r[2],b=n[0],P=n[1],M=n[2];Math.abs(p-b)<i&&Math.abs(v-P)<i&&Math.abs(g-M)<i?function(e){e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1}(e):(l=p-b,d=v-P,m=g-M,s=w*(m*=f=1/Math.hypot(l,d,m))-y*(d*=f),o=y*(l*=f)-x*m,a=x*d-w*l,(f=Math.hypot(s,o,a))?(s*=f=1/f,o*=f,a*=f):(s=0,o=0,a=0),c=d*a-m*o,u=m*s-l*a,h=l*o-d*s,(f=Math.hypot(c,u,h))?(c*=f=1/f,u*=f,h*=f):(c=0,u=0,h=0),e[0]=s,e[1]=c,e[2]=l,e[3]=0,e[4]=o,e[5]=u,e[6]=d,e[7]=0,e[8]=a,e[9]=h,e[10]=m,e[11]=0,e[12]=-(s*p+o*v+a*g),e[13]=-(c*p+u*v+h*g),e[14]=-(l*p+d*v+m*g),e[15]=1)}(this.view,e,m,f),a(this.projView,this.proj,this.view)}}var g=function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{c(i.next(e))}catch(e){s(e)}}function a(e){try{c(i.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}c((i=i.apply(e,t||[])).next())}))};class x{constructor(e,t,n,i){this.canvas=e,this.device=t,this.context=n,this.contextFormat=i,this.depthTexture=t.createTexture({size:[e.clientWidth*devicePixelRatio,e.clientHeight*devicePixelRatio],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT}),this.renderPassDesc={colorAttachments:[],depthStencilAttachment:{view:this.depthTexture.createView(),depthLoadValue:1,depthStoreOp:"store",stencilLoadValue:0,stencilStoreOp:"store"}},window.addEventListener("resize",(()=>{const r=[e.clientWidth*devicePixelRatio,e.clientHeight*devicePixelRatio];n.configure({device:t,format:i,size:r}),this.depthTexture.destroy(),this.depthTexture=t.createTexture({size:r,format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT}),this.renderPassDesc.depthStencilAttachment.view=this.depthTexture.createView()})),this.camera=new v(e)}render(){const e=()=>{const t=this.device.createCommandEncoder();this.renderPassDesc.colorAttachments=[{view:this.context.getCurrentTexture().createView(),loadValue:{r:.3,g:.5,b:.7,a:1},storeOp:"store"}];const n=t.beginRenderPass(this.renderPassDesc);Object.entries(this.resource.meshes).forEach((([,e])=>{const t=(t,n)=>{this.device.queue.writeBuffer(e.matrixBuffer,4*n*4*4,t.buffer,t.byteOffset,t.byteLength)};t(e.matrices[0],0),t(e.modelInvTrs[0],1),t(this.camera.projView,2),e.primitives.forEach((e=>{n.setPipeline(this.resource.pipelines[e.pipeline]),n.setVertexBuffer(0,e.positions),n.setVertexBuffer(1,e.normals),e.uvs&&n.setVertexBuffer(2,e.uvs),n.setIndexBuffer(e.indices,"uint16"),n.setBindGroup(0,e.uniformBindGroup),n.drawIndexed(e.indexCount)}))})),n.endPass(),this.device.queue.submit([t.finish()]),requestAnimationFrame(e)};requestAnimationFrame(e)}load(i){var r;return g(this,void 0,void 0,(function*(){this.gltf=yield function(i){return t(this,void 0,void 0,(function*(){const r=i.substring(0,i.lastIndexOf("/")),s=yield function(e){return new Promise((t=>{const n=new XMLHttpRequest;n.overrideMimeType("application/json"),n.open("GET",e),n.onreadystatechange=()=>{4===n.readyState&&200===n.status&&t(JSON.parse(n.responseText))},n.send(null)}))}(i);let o;const a=Promise.all(s.buffers.map((e=>function(e){return new Promise((t=>{const n=new XMLHttpRequest;n.responseType="arraybuffer",n.open("GET",e),n.onreadystatechange=()=>{4===n.readyState&&200===n.status&&t(n.response)},n.send(null)}))}(`${r}/${e.uri}`)))).then((t=>{o=function(t,n){return t.meshes.map((i=>i.primitives.map((i=>new e(t,i,n)))))}(s,t[0])})),c=[];let u=Promise.resolve();return s.images&&(u=Promise.all(s.images.map(((e,n)=>function(e){return t(this,void 0,void 0,(function*(){const t=new Image;return t.crossOrigin="Anonymous",t.src=e,yield t.decode(),createImageBitmap(t)}))}(`${r}/${e.uri}`).then((e=>{c[n]=e})))))),Promise.all([a,u]).then((()=>new n(s,o,c)))}))}(i),null===(r=this.resource)||void 0===r||r.destroy(),this.resource=new h(this.gltf,this.gltf.scene,this.device,this.contextFormat),this.render()}))}}const w=document.getElementById("webgpu-canvas"),y=document.getElementById("model-select");let b;y.onchange=()=>b.load(y.value),fetch("https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/model-index.json").then((e=>e.json())).then((e=>{e.forEach((e=>{return t=void 0,n=void 0,r=function*(){const t=document.createElement("option");t.innerHTML=e.name,t.value=`https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/${e.name}/glTF/${e.name}.gltf`,y.add(t),"Duck"===e.name&&(y.value=t.value,b=yield function(e){return g(this,void 0,void 0,(function*(){const t=navigator.gpu;if(!t)throw new Error("WebGPU is not supported on this browser.");const n=yield t.requestAdapter(),i=yield n.requestDevice(),r=e.getContext("webgpu"),s=r.getPreferredFormat(n);return r.configure({device:i,format:s,size:[e.clientWidth*devicePixelRatio,e.clientHeight*devicePixelRatio]}),new x(e,i,r,s)}))}(w),b.load(y.value))},new((i=void 0)||(i=Promise))((function(e,s){function o(e){try{c(r.next(e))}catch(e){s(e)}}function a(e){try{c(r.throw(e))}catch(e){s(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}c((r=r.apply(t,n||[])).next())}));var t,n,i,r}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,