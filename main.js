(()=>{"use strict";function e(e,t,n){return Math.min(Math.max(e,t),n)}function t(e,t=1){const n=void 0!==e?e:t;return Number.isInteger(n)?`${n}.0`:n}function n(e,t,n){const r=n.createBuffer({size:e.byteLength+3&-4,usage:t,mappedAtCreation:!0});let i;return i=e instanceof Int8Array?new Int8Array(r.getMappedRange()):e instanceof Uint8Array?new Uint8Array(r.getMappedRange()):e instanceof Int16Array?new Int16Array(r.getMappedRange()):e instanceof Uint16Array?new Uint16Array(r.getMappedRange()):e instanceof Uint32Array?new Uint32Array(r.getMappedRange()):new Float32Array(r.getMappedRange()),i.set(e),r.unmap(),r}class r{constructor(e,t,n){function r(t,r){const i=e.accessors[t],a=e.bufferViews[i.bufferView],s=(a.byteOffset||0)+(i.byteOffset||0);let o=a.byteStride/4;o=o>r?o:r;const c=function(e,t,n,r){switch(e){case 5120:case"BYTE":return new Int8Array(t,n,r);case 5121:case"UNSIGNED_BYTE":return new Uint8Array(t,n,r);case 5122:case"SHORT":return new Int16Array(t,n,r);case 5123:case"UNSIGNED_SHORT":return new Uint16Array(t,n,r);case 5125:case"UNSIGNED_INT":return new Uint32Array(t,n,r);case 5126:case"FLOAT":return new Float32Array(t,n,r);default:throw new Error("invalid component type")}}(i.componentType,n,s,i.count*o);if(o>r){const e=new(0,c.constructor)(i.count*r);for(let t=0,n=0;t<e.length;t+=r,n+=o)for(let i=0;i<r;i+=1)e[t+i]=c[n+i];return e}return c}this.material=e.materials[t.material],this.indexCount=e.accessors[t.indices].count,this.indices=function(e){if(e instanceof Uint16Array||e instanceof Uint32Array)return e;let t;return t=e instanceof Float32Array?new Uint32Array(e.length):new Uint16Array(e.length),e.forEach(((e,n)=>{t[n]=e})),t}(r(t.indices,1)),this.positions=r(t.attributes.POSITION,3),this.normals=r(t.attributes.NORMAL,3),void 0!==t.attributes.TEXCOORD_0&&(this.uvs=r(t.attributes.TEXCOORD_0,2)),void 0!==t.attributes.TANGENT&&(this.tangents=r(t.attributes.TANGENT,4))}}var i=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function s(e){try{c(r.next(e))}catch(e){a(e)}}function o(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,o)}c((r=r.apply(e,t||[])).next())}))};class a{constructor(e,t,n){this.scenes=e.scenes,this.scene=e.scene,this.nodes=e.nodes,this.cameras=e.cameras,this.meshes=t,this.images=n}}var s=1e-6,o="undefined"!=typeof Float32Array?Float32Array:Array;function c(){var e=new o(16);return o!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function l(e,t,n){var r=t[0],i=t[1],a=t[2],s=t[3],o=t[4],c=t[5],l=t[6],u=t[7],h=t[8],d=t[9],f=t[10],m=t[11],p=t[12],v=t[13],g=t[14],x=t[15],y=n[0],b=n[1],w=n[2],T=n[3];return e[0]=y*r+b*o+w*h+T*p,e[1]=y*i+b*c+w*d+T*v,e[2]=y*a+b*l+w*f+T*g,e[3]=y*s+b*u+w*m+T*x,y=n[4],b=n[5],w=n[6],T=n[7],e[4]=y*r+b*o+w*h+T*p,e[5]=y*i+b*c+w*d+T*v,e[6]=y*a+b*l+w*f+T*g,e[7]=y*s+b*u+w*m+T*x,y=n[8],b=n[9],w=n[10],T=n[11],e[8]=y*r+b*o+w*h+T*p,e[9]=y*i+b*c+w*d+T*v,e[10]=y*a+b*l+w*f+T*g,e[11]=y*s+b*u+w*m+T*x,y=n[12],b=n[13],w=n[14],T=n[15],e[12]=y*r+b*o+w*h+T*p,e[13]=y*i+b*c+w*d+T*v,e[14]=y*a+b*l+w*f+T*g,e[15]=y*s+b*u+w*m+T*x,e}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)});var u=l;function h(e,t,n){return`\n\n  [[block]] struct Camera\n  {\n      projView: mat4x4<f32>;\n  };\n  [[group(0), binding(0)]] var<uniform> camera: Camera;\n\n  struct Model {\n      matrix: mat4x4<f32>;\n      invTr: mat4x4<f32>;\n  };\n  [[block]] struct Models\n  {\n      model: [[stride(128)]] array<Model, ${e}>;\n  };\n  [[group(1), binding(0)]] var<uniform> models: Models;\n\n  struct VertexOutput\n  {\n      [[builtin(position)]] Position: vec4<f32>;\n      [[location(0)]] normal: vec3<f32>;\n      [[location(1)]] worldPos: vec3<f32>;\n      ${t?"[[location(2)]] uv: vec2<f32>;":""}\n      ${n?"[[location(3)]] tangent: vec3<f32>;":""}\n      ${n?"[[location(4)]] bitangent: vec3<f32>;":""}\n  };\n\n  [[stage(vertex)]]\n  fn main([[builtin(instance_index)]] instanceIndex : u32,\n          [[location(0)]] pos: vec3<f32>,\n          [[location(1)]] normal: vec3<f32>,\n          ${t?"[[location(2)]] uv: vec2<f32>,":""}\n          ${n?"[[location(3)]] tangent: vec4<f32>,":""})\n          -> VertexOutput\n  {\n      let model = models.model[instanceIndex];\n      var v: VertexOutput;\n      v.Position = camera.projView * model.matrix * vec4<f32>(pos, 1.0);\n      v.normal = normalize((model.invTr * vec4<f32>(normal, 0.0)).xyz);\n      v.worldPos = (model.matrix * vec4<f32>(pos, 1.0)).xyz;\n      ${t?"v.uv = uv;":""}\n      ${n?"\n      v.tangent = normalize((model.matrix * vec4<f32>(tangent.xyz, 0.0)).xyz);\n      v.bitangent = cross(v.normal, v.tangent) * tangent.w;\n      /* wgsl */ ":""}\n      return v;\n  }\n  `}function d(e,n,r){const{baseColorTexture:i,metallicRoughnessTexture:a,metallicFactor:s,roughnessFactor:o}=e.pbrMetallicRoughness;let{baseColorFactor:c}=e.pbrMetallicRoughness;c=c||[1,1,1,1];const{normalTexture:l,occlusionTexture:u,emissiveTexture:h}=e;let{emissiveFactor:d}=e;d=d||[0,0,0];let{alphaCutoff:f}=e;return f=void 0!==f?f:.5,`\n\n  [[block]] struct Camera\n  {\n      eye: vec3<f32>;\n  };\n  [[group(0), binding(1)]] var<uniform> camera: Camera;\n\n  ${i?"\n  [[group(1), binding(1)]] var texSampler: sampler;\n  [[group(1), binding(2)]] var tex: texture_2d<f32>;\n  /* wgsl */ ":""}\n  ${a?"\n  [[group(1), binding(3)]] var metalRoughSampler: sampler;\n  [[group(1), binding(4)]] var metalRoughTex: texture_2d<f32>;\n  /* wgsl */ ":""}\n  ${l?"\n  [[group(1), binding(5)]] var normalSampler: sampler;\n  [[group(1), binding(6)]] var normalTex: texture_2d<f32>;\n  /* wgsl */ ":""}\n  ${u?"\n  [[group(1), binding(7)]] var occlusionSampler: sampler;\n  [[group(1), binding(8)]] var occlusionTex: texture_2d<f32>;\n  /* wgsl */ ":""}\n  ${h?"\n  [[group(1), binding(9)]] var emissiveSampler: sampler;\n  [[group(1), binding(10)]] var emissiveTex: texture_2d<f32>;\n  /* wgsl */ ":""}\n\n  let pi: f32 = 3.141592653589793;\n\n  fn blinnPhong(color: vec3<f32>,\n           l: vec3<f32>,\n           v: vec3<f32>,\n           n: vec3<f32>) -> vec3<f32>\n  {\n      let specExp = 64.0;\n      let intensity = 0.5;\n      let ambient = 0.5;\n\n      let diffuse = max(dot(n, l), 0.0);\n      let specular = pow(max(dot(n, normalize(l + v)), 0.0), specExp);\n\n      return color * ((diffuse + specular) * intensity + ambient);\n  }\n\n  fn brdf(color: vec3<f32>,\n          metallic: f32,\n          roughness: f32,\n          l: vec3<f32>,\n          v: vec3<f32>,\n          n: vec3<f32>) -> vec3<f32>\n  {\n      let h = normalize(l + v);\n      let ndotl = clamp(dot(n, l), 0.0, 1.0);\n      let ndotv = abs(dot(n, v));\n      let ndoth = clamp(dot(n, h), 0.0, 1.0);\n      let vdoth = clamp(dot(v, h), 0.0, 1.0);\n\n      let f0 = vec3<f32>(0.04);\n      let diffuseColor = color * (1.0 - f0) * (1.0 - metallic);\n      let specularColor = mix(f0, color, metallic);\n\n      let reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\n      let reflectance0 = specularColor;\n      let reflectance9 = vec3<f32>(clamp(reflectance * 25.0, 0.0, 1.0));\n      let f = reflectance0 + (reflectance9 - reflectance0) * pow(1.0 - vdoth, 5.0);\n\n      let r2 = roughness * roughness;\n      let r4 = r2 * r2;\n      let attenuationL = 2.0 * ndotl / (ndotl + sqrt(r4 + (1.0 - r4) * ndotl * ndotl));\n      let attenuationV = 2.0 * ndotv / (ndotv + sqrt(r4 + (1.0 - r4) * ndotv * ndotv));\n      let g = attenuationL * attenuationV;\n\n      let temp = ndoth * ndoth * (r2 - 1.0) + 1.0;\n      let d = r2 / (pi * temp * temp);\n\n      let diffuse = (1.0 - f) / pi * diffuseColor;\n      let specular = max(f * g * d / (4.0 * ndotl * ndotv), vec3<f32>(0.0));\n      let intensity = 2.5;\n      let ambient = 0.4;\n      return ndotl * (diffuse + specular) * intensity + color * ambient;\n  }\n\n  [[stage(fragment)]]\n  fn main([[location(0)]] vNormal: vec3<f32>,\n          [[location(1)]] worldPos: vec3<f32>,\n          ${n?"[[location(2)]] uv: vec2<f32>,":""}\n          ${r?"[[location(3)]] tangent: vec3<f32>,":""}\n          ${r?"[[location(4)]] bitangent: vec3<f32>,":""})\n          -> [[location(0)]] vec4<f32>\n  {\n      let lightPos = vec3<f32>(200.0, 400.0, 300.0);\n\n      var color = vec4<f32>(${t(c[0])},\n                            ${t(c[1])},\n                            ${t(c[2])},\n                            ${t(c[3])});\n      ${i?"color = color * textureSample(tex, texSampler, uv);":""}\n      ${"MASK"===e.alphaMode?`\n      if (color.a < ${t(f)})\n      {\n        discard;\n      }\n      /* wgsl */ `:""}\n\n      var metallic: f32 = ${t(s)};\n      var roughness: f32 = ${t(o)};\n      ${a?"\n      let metalRough = textureSample(metalRoughTex, metalRoughSampler, uv);\n      metallic = metallic * metalRough.b;\n      roughness = roughness * metalRough.g;\n      /* wgsl */ ":""}\n      roughness = clamp(roughness, 0.04, 1.0);\n\n      let lightDir = normalize(lightPos - worldPos);\n      let viewDir = normalize(camera.eye - worldPos);\n\n      ${l&&r?"\n      var normal = textureSample(normalTex, normalSampler, uv).rgb;\n      normal = normal * 2.0 - 1.0;\n      normal = normal.x * tangent + normal.y * bitangent + normal.z * vNormal;\n      normal = normalize(normal);\n      /* wgsl */ ":"\n      var normal = normalize(vNormal);\n      /* wgsl */ "}\n      ${e.doubleSided?"\n      if (dot(normal, viewDir) < 0.0) {\n        normal = -normal;\n      }\n      /* wgsl */ ":""}\n\n      ${u?"let ao = textureSample(occlusionTex, occlusionSampler, uv).r;":"let ao = 1.0;"}\n      var emissive = vec3<f32>(${t(d[0])},\n                               ${t(d[1])},\n                               ${t(d[2])});\n      ${h?"emissive = emissive * textureSample(emissiveTex, emissiveSampler, uv).rgb;":""}\n\n      return vec4<f32>(brdf(color.rgb, metallic, roughness, lightDir, viewDir, normal) * ao + emissive, color.a);\n  }\n  `}class f{constructor(e,t){this.isTransparent=!1,this.indexCount=e.indexCount,this.indexFormat=e.indices instanceof Uint16Array?"uint16":"uint32",this.positions=n(e.positions,GPUBufferUsage.VERTEX,t),this.normals=n(e.normals,GPUBufferUsage.VERTEX,t),this.indices=n(e.indices,GPUBufferUsage.INDEX,t),this.uvs=e.uvs?n(e.uvs,GPUBufferUsage.VERTEX,t):null,this.tangents=e.tangents?n(e.tangents,GPUBufferUsage.VERTEX,t):null}draw(e,t){e.setPipeline(this.pipeline),e.setVertexBuffer(0,this.positions),e.setVertexBuffer(1,this.normals),this.uvs&&e.setVertexBuffer(2,this.uvs),this.tangents&&e.setVertexBuffer(3,this.tangents),e.setIndexBuffer(this.indices,this.indexFormat),e.setBindGroup(1,this.uniformBindGroup),e.drawIndexed(this.indexCount,t)}}class m{constructor(e,t,r,i){this.meshes={},this.textures={};const a=r.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{}}]}),s=r.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),u=r.createBuffer({size:12,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});this.camera={projViewBuffer:s,eyeBuffer:u,bindGroup:r.createBindGroup({layout:a,entries:[{binding:0,resource:{buffer:s}},{binding:1,resource:{buffer:u}}]})};const m=(t,n=c())=>{var i;const a=(s=n,(u=new o(16))[0]=s[0],u[1]=s[1],u[2]=s[2],u[3]=s[3],u[4]=s[4],u[5]=s[5],u[6]=s[6],u[7]=s[7],u[8]=s[8],u[9]=s[9],u[10]=s[10],u[11]=s[11],u[12]=s[12],u[13]=s[13],u[14]=s[14],u[15]=s[15],u);var s,u;if(t.matrix)l(a,a,t.matrix);else{if(t.translation&&function(e,t,n){var r,i,a,s,o,c,l,u,h,d,f,m,p=n[0],v=n[1],g=n[2];t===e?(e[12]=t[0]*p+t[4]*v+t[8]*g+t[12],e[13]=t[1]*p+t[5]*v+t[9]*g+t[13],e[14]=t[2]*p+t[6]*v+t[10]*g+t[14],e[15]=t[3]*p+t[7]*v+t[11]*g+t[15]):(r=t[0],i=t[1],a=t[2],s=t[3],o=t[4],c=t[5],l=t[6],u=t[7],h=t[8],d=t[9],f=t[10],m=t[11],e[0]=r,e[1]=i,e[2]=a,e[3]=s,e[4]=o,e[5]=c,e[6]=l,e[7]=u,e[8]=h,e[9]=d,e[10]=f,e[11]=m,e[12]=r*p+o*v+h*g+t[12],e[13]=i*p+c*v+d*g+t[13],e[14]=a*p+l*v+f*g+t[14],e[15]=s*p+u*v+m*g+t[15])}(a,a,t.translation),t.rotation){const e=c();!function(e,t){var n=t[0],r=t[1],i=t[2],a=t[3],s=n+n,o=r+r,c=i+i,l=n*s,u=r*s,h=r*o,d=i*s,f=i*o,m=i*c,p=a*s,v=a*o,g=a*c;e[0]=1-h-m,e[1]=u+g,e[2]=d-v,e[3]=0,e[4]=u-g,e[5]=1-l-m,e[6]=f+p,e[7]=0,e[8]=d+v,e[9]=f-p,e[10]=1-l-h,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1}(e,t.rotation),l(a,a,e)}t.scale&&function(e,t,n){var r=n[0],i=n[1],a=n[2];e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*i,e[5]=t[5]*i,e[6]=t[6]*i,e[7]=t[7]*i,e[8]=t[8]*a,e[9]=t[9]*a,e[10]=t[10]*a,e[11]=t[11]*a,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]}(a,a,t.scale)}if(void 0!==t.mesh){const n=c();!function(e,t){var n=t[0],r=t[1],i=t[2],a=t[3],s=t[4],o=t[5],c=t[6],l=t[7],u=t[8],h=t[9],d=t[10],f=t[11],m=t[12],p=t[13],v=t[14],g=t[15],x=n*o-r*s,y=n*c-i*s,b=n*l-a*s,w=r*c-i*o,T=r*l-a*o,E=i*l-a*c,M=u*p-h*m,P=u*v-d*m,U=u*g-f*m,R=h*v-d*p,A=h*g-f*p,S=d*g-f*v,B=x*S-y*A+b*R+w*U-T*P+E*M;B&&(B=1/B,e[0]=(o*S-c*A+l*R)*B,e[1]=(i*A-r*S-a*R)*B,e[2]=(p*E-v*T+g*w)*B,e[3]=(d*T-h*E-f*w)*B,e[4]=(c*U-s*S-l*P)*B,e[5]=(n*S-i*U+a*P)*B,e[6]=(v*b-m*E-g*y)*B,e[7]=(u*E-d*b+f*y)*B,e[8]=(s*A-o*U+l*M)*B,e[9]=(r*U-n*A-a*M)*B,e[10]=(m*T-p*b+g*x)*B,e[11]=(h*b-u*T-f*x)*B,e[12]=(o*P-s*R-c*M)*B,e[13]=(n*R-r*P+i*M)*B,e[14]=(p*y-m*w-v*x)*B,e[15]=(u*w-h*y+d*x)*B)}(n,a),function(e,t){if(e===t){var n=t[1],r=t[2],i=t[3],a=t[6],s=t[7],o=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=n,e[6]=t[9],e[7]=t[13],e[8]=r,e[9]=a,e[11]=t[14],e[12]=i,e[13]=s,e[14]=o}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15]}(n,n),this.meshes[t.mesh]?(this.meshes[t.mesh].matrices.push(a),this.meshes[t.mesh].matrices.push(n)):this.meshes[t.mesh]={matrices:[a,n],matrixBuffer:void 0,primitives:e.meshes[t.mesh].map((e=>new f(e,r)))}}null===(i=t.children)||void 0===i||i.forEach((t=>m(e.nodes[t],a)))};e.scenes[t].nodes.forEach((t=>{m(e.nodes[t])})),Object.entries(this.meshes).forEach((([t,s])=>{s.matrixBuffer=n(function(e){let t=0;e.forEach((e=>{t+=e.length}));const n=new Float32Array(t);return t=0,e.forEach((e=>{n.set(e,t),t+=e.length})),n}(s.matrices),GPUBufferUsage.UNIFORM,r),s.primitives.forEach(((n,o)=>{const{material:c}=e.meshes[Number(t)][o],{baseColorTexture:l,metallicRoughnessTexture:u}=c.pbrMetallicRoughness,{normalTexture:f,occlusionTexture:m,emissiveTexture:p}=c,v=[l,u,f,m,p];n.isTransparent="BLEND"===c.alphaMode,v.forEach((t=>{t&&!this.textures[t.index]&&(this.textures[t.index]=r.createTexture({size:[e.images[t.index].width,e.images[t.index].height,1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT}),r.queue.copyExternalImageToTexture({source:e.images[t.index]},{texture:this.textures[t.index]},[e.images[t.index].width,e.images[t.index].height]))})),n.pipeline=function(e,t,n,r,i,a,s){const{baseColorTexture:o,metallicRoughnessTexture:c}=n.pbrMetallicRoughness,{normalTexture:l,occlusionTexture:u,emissiveTexture:f}=n,m=[o,c,l,u,f];function p(e,t){return{attributes:[{shaderLocation:e,offset:0,format:`float32x${t}`}],arrayStride:4*t}}const v=[p(0,3),p(1,3)];r&&v.push(p(2,2)),i&&v.push(p(3,4));const g=[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{}}];return m.forEach(((e,t)=>{e&&(g.push({binding:2*t+1,visibility:GPUShaderStage.FRAGMENT,sampler:{}}),g.push({binding:2*t+2,visibility:GPUShaderStage.FRAGMENT,texture:{}}))})),e.createRenderPipeline({layout:e.createPipelineLayout({bindGroupLayouts:[s,e.createBindGroupLayout({entries:g})]}),vertex:{module:e.createShaderModule({code:h(a,r,i)}),entryPoint:"main",buffers:v},fragment:{module:e.createShaderModule({code:d(n,r,i)}),entryPoint:"main",targets:[{format:t,blend:{color:"BLEND"!==n.alphaMode?{operation:"add",srcFactor:"one",dstFactor:"zero"}:{operation:"add",srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha"},alpha:"BLEND"!==n.alphaMode?{operation:"add",srcFactor:"zero",dstFactor:"one"}:{operation:"add",srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha"}}}]},primitive:{topology:"triangle-list",cullMode:n.doubleSided?"none":"back"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"}})}(r,i,c,null!==n.uvs,null!==n.tangents,s.matrices.length/2,a);const g=[{binding:0,resource:{buffer:s.matrixBuffer}}];v.forEach(((e,t)=>{e&&(g.push({binding:2*t+1,resource:r.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"linear"})}),g.push({binding:2*t+2,resource:this.textures[e.index].createView()}))})),n.uniformBindGroup=r.createBindGroup({layout:n.pipeline.getBindGroupLayout(1),entries:g})}))}))}destroy(){Object.entries(this.meshes).forEach((([,e])=>{e.matrixBuffer.destroy(),e.primitives.forEach((e=>{var t;e.indices.destroy(),e.positions.destroy(),e.normals.destroy(),null===(t=e.uvs)||void 0===t||t.destroy()}))})),Object.entries(this.textures).forEach((([,e])=>e.destroy()))}}function p(){var e=new o(3);return o!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function v(e,t,n){var r=new o(3);return r[0]=e,r[1]=t,r[2]=n,r}p();const g=p(),x=v(0,1,0);class y{constructor(t){this.radius=3,this.theta=0,this.phi=0,this.proj=c(),this.view=c(),this.eye=v(0,0,3),this.projView=c(),this.canvas=t;const n=t.clientWidth/t.clientHeight;(function(e,t,n,r,i){var a,s=1/Math.tan(t/2);e[0]=s/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=i&&i!==1/0?(a=1/(r-i),e[10]=(i+r)*a,e[14]=2*i*r*a):(e[10]=-1,e[14]=-2*r)})(this.proj,Math.PI/3,n,.01,1/0),this.update(),window.addEventListener("resize",(()=>{this.proj[0]=1/(Math.tan(Math.PI/6)*(t.clientWidth/t.clientHeight)),u(this.projView,this.proj,this.view)}));let r=!1;this.canvas.onmousedown=()=>{r=!0},this.canvas.onmouseup=()=>{r=!1},this.canvas.onmousemove=t=>{r&&(this.theta-=t.movementX/window.innerWidth*Math.PI*2,this.phi=e(this.phi-t.movementY/window.innerHeight*Math.PI,-Math.PI/2+.1,Math.PI/2-.1),this.update())},this.canvas.onwheel=t=>{this.radius=e(this.radius+.002*t.deltaY,.01,1/0),this.update()}}update(){var e,t,n,r,i,a;this.eye=v(0,0,this.radius),e=this.eye,t=this.eye,n=g,r=this.phi,a=[],(i=[])[0]=t[0]-n[0],i[1]=t[1]-n[1],i[2]=t[2]-n[2],a[0]=i[0],a[1]=i[1]*Math.cos(r)-i[2]*Math.sin(r),a[2]=i[1]*Math.sin(r)+i[2]*Math.cos(r),e[0]=a[0]+n[0],e[1]=a[1]+n[1],e[2]=a[2]+n[2],function(e,t,n,r){var i=[],a=[];i[0]=t[0]-n[0],i[1]=t[1]-n[1],i[2]=t[2]-n[2],a[0]=i[2]*Math.sin(r)+i[0]*Math.cos(r),a[1]=i[1],a[2]=i[2]*Math.cos(r)-i[0]*Math.sin(r),e[0]=a[0]+n[0],e[1]=a[1]+n[1],e[2]=a[2]+n[2]}(this.eye,this.eye,g,this.theta),function(e,t,n,r){var i,a,o,c,l,u,h,d,f,m,p=t[0],v=t[1],g=t[2],x=r[0],y=r[1],b=r[2],w=n[0],T=n[1],E=n[2];Math.abs(p-w)<s&&Math.abs(v-T)<s&&Math.abs(g-E)<s?function(e){e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1}(e):(h=p-w,d=v-T,f=g-E,i=y*(f*=m=1/Math.hypot(h,d,f))-b*(d*=m),a=b*(h*=m)-x*f,o=x*d-y*h,(m=Math.hypot(i,a,o))?(i*=m=1/m,a*=m,o*=m):(i=0,a=0,o=0),c=d*o-f*a,l=f*i-h*o,u=h*a-d*i,(m=Math.hypot(c,l,u))?(c*=m=1/m,l*=m,u*=m):(c=0,l=0,u=0),e[0]=i,e[1]=c,e[2]=h,e[3]=0,e[4]=a,e[5]=l,e[6]=d,e[7]=0,e[8]=o,e[9]=u,e[10]=f,e[11]=0,e[12]=-(i*p+a*v+o*g),e[13]=-(c*p+l*v+u*g),e[14]=-(h*p+d*v+f*g),e[15]=1)}(this.view,this.eye,g,x),u(this.projView,this.proj,this.view)}reset(){this.radius=3,this.theta=0,this.phi=0,this.update()}}var b=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function s(e){try{c(r.next(e))}catch(e){a(e)}}function o(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,o)}c((r=r.apply(e,t||[])).next())}))};class w{constructor(e,t,n,r){this.canvas=e,this.device=t,this.context=n,this.contextFormat=r;let i=t.createTexture({size:[e.clientWidth*devicePixelRatio,e.clientHeight*devicePixelRatio],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT});this.renderPassDesc={colorAttachments:[],depthStencilAttachment:{view:i.createView(),depthLoadValue:1,depthStoreOp:"store",stencilLoadValue:0,stencilStoreOp:"store"}},window.addEventListener("resize",(()=>{const a=[e.clientWidth*devicePixelRatio,e.clientHeight*devicePixelRatio];n.configure({device:t,format:r,size:a}),i.destroy(),i=t.createTexture({size:a,format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT}),this.renderPassDesc.depthStencilAttachment.view=i.createView()})),this.camera=new y(e)}render(){const e=()=>{const t=this.device.createCommandEncoder();this.renderPassDesc.colorAttachments=[{view:this.context.getCurrentTexture().createView(),loadValue:{r:.3,g:.5,b:.7,a:1},storeOp:"store"}];const n=t.beginRenderPass(this.renderPassDesc),r=this.camera.projView;this.device.queue.writeBuffer(this.scene.camera.projViewBuffer,0,r.buffer,r.byteOffset,r.byteLength);const i=this.camera.eye;this.device.queue.writeBuffer(this.scene.camera.eyeBuffer,0,i.buffer,i.byteOffset,i.byteLength),n.setBindGroup(0,this.scene.camera.bindGroup),Object.entries(this.scene.meshes).forEach((([,e])=>{e.primitives.forEach((t=>{t.isTransparent||t.draw(n,e.matrices.length/2)}))})),Object.entries(this.scene.meshes).forEach((([,e])=>{e.primitives.forEach((t=>{t.isTransparent&&t.draw(n,e.matrices.length/2)}))})),n.endPass(),this.device.queue.submit([t.finish()]),requestAnimationFrame(e)};requestAnimationFrame(e)}load(e){var t;return b(this,void 0,void 0,(function*(){this.gltf=yield function(e){return i(this,void 0,void 0,(function*(){const t=e.substring(0,e.lastIndexOf("/")),n=yield function(e){return new Promise((t=>{const n=new XMLHttpRequest;n.overrideMimeType("application/json"),n.open("GET",e),n.onreadystatechange=()=>{4===n.readyState&&200===n.status&&t(JSON.parse(n.responseText))},n.send(null)}))}(e);let s;const o=Promise.all(n.buffers.map((e=>function(e){return new Promise((t=>{const n=new XMLHttpRequest;n.responseType="arraybuffer",n.open("GET",e),n.onreadystatechange=()=>{4===n.readyState&&200===n.status&&t(n.response)},n.send(null)}))}(`${t}/${e.uri}`)))).then((e=>{s=function(e,t){return e.meshes.map((n=>n.primitives.map((n=>new r(e,n,t)))))}(n,e[0])})),c=[];let l=Promise.resolve();return n.images&&(l=Promise.all(n.images.map(((e,n)=>function(e){return i(this,void 0,void 0,(function*(){const t=new Image;return t.crossOrigin="Anonymous",t.src=e,yield t.decode(),createImageBitmap(t)}))}(`${t}/${e.uri}`).then((e=>{c[n]=e})))))),Promise.all([o,l]).then((()=>new a(n,s,c)))}))}(e),null===(t=this.scene)||void 0===t||t.destroy(),this.scene=new m(this.gltf,this.gltf.scene,this.device,this.contextFormat),this.camera.reset(),this.render()}))}}const T=document.getElementById("webgpu-canvas"),E=document.getElementById("model-select");let M;E.onchange=()=>M.load(E.value),fetch("https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/model-index.json").then((e=>e.json())).then((e=>{e.forEach((e=>{return t=void 0,n=void 0,i=function*(){const t=document.createElement("option");t.innerHTML=e.name,t.value=`https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/${e.name}/glTF/${e.name}.gltf`,E.add(t),"DamagedHelmet"===e.name&&(E.value=t.value,M=yield function(e){return b(this,void 0,void 0,(function*(){const t=navigator.gpu;if(!t)throw new Error("WebGPU is not supported on this browser.");const n=yield t.requestAdapter(),r=yield n.requestDevice(),i=e.getContext("webgpu"),a=i.getPreferredFormat(n);return i.configure({device:r,format:a,size:[e.clientWidth*devicePixelRatio,e.clientHeight*devicePixelRatio]}),new w(e,r,i,a)}))}(T),M.load(E.value))},new((r=void 0)||(r=Promise))((function(e,a){function s(e){try{c(i.next(e))}catch(e){a(e)}}function o(e){try{c(i.throw(e))}catch(e){a(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(s,o)}c((i=i.apply(t,n||[])).next())}));var t,n,r,i}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,